#Written by Alexander M. West
#Version: Dec. 8, 2015

#Useage: <this> <target_file> <test_list> <#_of_experiments>
#As input takes a MIPGEN "shortform" file, a text list of experiments to compare with each line in the form of "# experiment1 experiment2".
#As output returns text form with MIP, Tags1, Sample1, Tags2, Sample2, D-score (generated by K-S algorithm), p-score, and call of NULL, MUTANT, or NO SAMPLE. Summary at EOF.

import sys
from scipy.stats import ks_2samp

output_file = open("shortform.kstested.txt", 'w')

shortform_file = open(sys.argv[1])
current_mip = ""
samples = {}
experiments = int(sys.argv[3])
p05 = [0] * experiments
p01 = [0] * experiments
p005 = [0] * experiments
p001 = [0] * experiments
p0005 = [0] * experiments
p0001 = [0] * experiments
total = [0] * experiments

def output_current():
    kstest_file = open(sys.argv[2])
    for line in kstest_file:
        number, sample1, sample2 = line.rstrip().split()
        output_file.write(current_mip + "\t")
        if sample1 in samples and sample2 in samples:
            total[int(number)] += 1
            (D, p) = ks_2samp(samples[sample1], samples[sample2])
            output_file.write(str(len(samples[sample1])) + "\t" + sample1 + "\t" + str(len(samples[sample2])) + "\t" + sample2 + "\t" + str(D) + "\t" + str(p))
            if p > .05:
                output_file.write("\tNULL\n")
            else:
                output_file.write("\tMUTANT\t" + str(round(float(1.0) - p, 4) * 100) + "%\n")
                if p <= .05: p05[int(number)] += 1
                if p <= .01: p01[int(number)] += 1
                if p <= .005: p005[int(number)] += 1
                if p <= .001: p001[int(number)] += 1
                if p <= .0005: p0005[int(number)] += 1
                if p <= .0001: p0001[int(number)] += 1
        else:
            if sample1 in samples:
                output_file.write(str(len(samples[sample1])) + "\t" + sample1 + "\t0\t" + sample2 + "\t\t\tNO SAMPLE\n")
            elif sample2 in samples:
                output_file.write("0\t" + sample1 + "\t" + str(len(samples[sample2])) + "\t" + sample2 + "\t\t\tNO SAMPLE\n")
            else:
                output_file.write("0\t" + sample1 + "\t0\t" + sample2 + "\t\t\tNO SAMPLE\n")
    kstest_file.close()

for line in shortform_file:
    #print line
    #print line.rstrip().split()
    mip, sample, allele, length, tags, proportion = line.rstrip().split()
    if mip != current_mip:
        if current_mip != "":
            output_current()
        samples = {}
        current_mip = mip
    if sample not in samples:
        samples[sample] = [int(length)] * int(tags)
    else:
        samples[sample] += [int(length)] * int(tags)
output_current()

output_file.write("\n\n\n*** Summary ***\n")
output_file.write("p = .05 \t" + str(p05) + "\n")
output_file.write("p = .01 \t" + str(p01) + "\n")
output_file.write("p = .005\t" + str(p005) + "\n")
output_file.write("p = .001\t" + str(p001) + "\n")
output_file.write("p = .0005\t" + str(p0005) + "\n")
output_file.write("p = .0001\t" + str(p0001) + "\n")
output_file.write("totals \t" + str(total) + "\n")
shortform_file.close()
output_file.close()